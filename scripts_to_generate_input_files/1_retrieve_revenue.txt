libname input '/shares/SSB_Cost_Survey/Ardini_Cost_Survey/SAS_Cost_Survey/Profitability_Profiles/Calculate_Profit/Dataset';
libname bluefin '/shares/SSB_Cost_Survey/Ardini_Cost_Survey/SAS_Cost_Survey/Profitability_Profiles/Calculate_Profit/Revenues/ACCSP';
libname cost '/shares/SSB_Cost_Survey/Ardini_Cost_Survey/SAS_Cost_Survey/Profitability_Profiles/Calculate_Profit/Revenues/Hullid_Impute';
libname cost_1 '/shares/SSB_Cost_Survey/Ardini_Cost_Survey/SAS_Cost_Survey/Profitability_Profiles/Calculate_Profit/Revenues/Hullid_Impute/Commercial';
libname cost_2 '/shares/SSB_Cost_Survey/Ardini_Cost_Survey/SAS_Cost_Survey/Profitability_Profiles/Calculate_Profit/Revenues/Hullid_Impute/For_Hire';
libname cost_3 '/shares/SSB_Cost_Survey/Ardini_Cost_Survey/SAS_Cost_Survey/Profitability_Profiles/Calculate_Profit/Revenues/Hullid_Impute/Primary_Gear';
libname cost_4 '/shares/SSB_Cost_Survey/Ardini_Cost_Survey/SAS_Cost_Survey/Profitability_Profiles/Calculate_Profit/Revenues/Hullid_Impute/Primary_FMP';
libname old '/shares/SSB_Cost_Survey/Ardini_Cost_Survey/SAS_Cost_Survey/Profitability_Profiles/Calculate_Profit/Revenues/Annual_Hullid';

%let orausername1 = "gardini";
%let orapassword1 = "XXXXXXXXXXXX";

data cost.sampling_frame_2022; set input.final_sampling_frame_hullid;
HULLID_1 = strip(put(hull_id, 10.));
proc sort; by HULLID_1;

data cost.response_2022; set input.final_response_hullid;
HULLID_1 = strip(put(hull_id, 10.));
PERMIT_1 = strip(put(permit, 6.)); /*Need to keep permit as well to link to recreational revenue*/
keep icf_master_id  hullid_1  permit_1;
proc sort; by HULLID_1;


/***Commercial Revenue***/
/*CAMS*/
proc sql;
	connect to oracle (user =&orausername1  password =&orapassword1 path = NEFSC_USERS);

create table cost_1.cams_all_2022 as select * from connection to oracle
(select a.camsid, a.date_trip, a.dlr_disp, a.docid, a.hullid, a.itis_group1, a.itis_tsn, a.livlb, a.lndlb, a.negear, a.permit_state_fed, a.status, a.value, a.year, 
b.fmp, b.itis_name,
c.negear_name, c.secgear_mapped 
from cams_garfo.cams_land a, cams_garfo.cfg_itis b, cams_garfo.cfg_negear c
where year=2022
and a.rec=0 /*removes recreational landings*/
and a.itis_tsn=b.itis_tsn /*ITIS_TSN is a unique identifier in CFG_ITIS*/
and a.negear=c.negear); /*NEGEAR is a unique identifier in CFG_NEGEAR*/

disconnect from oracle;
quit;

data disp_codes_1; set cost_1.cams_all_2022; keep dlr_disp lndlb value;
proc sort; by dlr_disp;

data disp_codes_2; set cost_1.NEFSC_GARFO_CFDBS_SFDISP;
dlr_disp = DISPOSITION_CODE; proc sort; by dlr_disp; 

data disp_codes_3;
merge disp_codes_1 (in=inone) disp_codes_2 (in=intwo);
by dlr_disp; if inone=1;
count=1;
proc sort; by dlr_disp;
proc means noprint;
by dlr_disp;
var count;
id disposition_desc;
output out = dlr_disposition_frequency sum=;
data cost_1.dlr_disposition_frequency; set dlr_disposition_frequency; drop _TYPE_ _FREQ_;

data cost_1.disp_codes_1; set disp_codes_3; if dlr_disp in ('001') then delete;

data cost_1.cams_1; set cost_1.cams_all_2022;
if value>0 then IMPUTE=0;
if value=0 then IMPUTE=1;
if value=. then IMPUTE=1;
if itis_tsn in ('172421') then delete; /*For bluefin tuna, use ACCSP data instead of CAMS*/
proc sort; by itis_tsn;

data cams_2; set cost_1.cams_1;
if IMPUTE=0; /*Generating prices using observations that do have a value*/
proc sort; by itis_tsn itis_name;
proc means noprint;
by itis_tsn itis_name;
vars lndlb value;
output out = cams_3 sum=;
data cost_1.itis_tsn_2022_prices; set cams_3;
total_value = value; drop value;
total_lndlb = lndlb; drop lndlb;
IMPUTE_PRICE = total_value/total_lndlb;
drop _TYPE_ _FREQ_;
proc sort; by itis_tsn;

data cost_1.cams_all_2022_impute;
merge cost_1.cams_1 (in=inone) cost_1.itis_tsn_2022_prices;
by itis_tsn; if inone=1;

if IMPUTE=0 then COMMERCIAL_REVENUE = value; /*Uses value if available*/
if IMPUTE=1 then do;
if dlr_disp in ('000', '002', '101', '229', '403', '602', '201') then COMMERCIAL_REVENUE = value; /*For these specific disposition codes, keep value as $0/null*/
if dlr_disp not in ('000', '002', '101', '229', '403', '602', '201') then COMMERCIAL_REVENUE = round((lndlb*IMPUTE_PRICE),1); /*Uses landed pounds multiplied by price if value is not available*/
/*else commercial_revenue = round((lndlb*impute_price),1); /*Uses landed pounds multiplied by price if value is not available*/
end;
HULLID_1 = strip(put(hullid, 10.)); drop hullid;

SOURCE = "CAMS  ";

drop total_value total_lndlb;
proc sort; by HULLID_1;

data dlr_disp_frequency; set cost_1.cams_1; proc sort; by dlr_disp; proc freq; tables dlr_disp;

/*ACCSP*/
data cost_1.accsp_1; set bluefin.raw_revised_2022_accsp_1  bluefin.raw_revised_2022_accsp_2;
DOCID = strip(put(trip_id, 16.));
HULLID_1 = strip(put(VESSEL_CG_OR_ST_REG, 10.));
ITIS_TSN = species_itis; 
ITIS_NAME = "TUNA,BLUEFIN";
FMP = "Highly Migratory Species";
NEGEAR = gear_code;
LNDLB = landed_pounds;
IMPUTE = 0;
COMMERCIAL_REVENUE = dollars;
SOURCE = "ACCSP";
if itis_tsn in ('172421'); /*For bluefin tuna, use ACCSP data instead of CAMS. All observations have VALUE; no need to impute prices. $11.9M in value in this dataset compared to $6.9M in CAMS*/

keep DOCID  HULLID_1  LANDING_DATE  ITIS_TSN  ITIS_NAME  FMP  NEGEAR  LNDLB  COMMERCIAL_REVENUE  IMPUTE  SOURCE;

/*Combine CAMS and ACCSP*/
data cost_1.cams_accsp_combined;
set cost_1.cams_all_2022_impute  cost_1.accsp_1;
proc sort; by HULLID_1;

proc means noprint;
by hullid_1;
var commercial_revenue;
output out=cost_1.all_vessels_commercial_revenue sum=commercial_revenue; /*This dataset is used to assess mean/median revenue for all vessels, not just the ones who completed the cost survey*/

/*Merge to response dataset*/
data cost_1.response_cams_accsp_revenue;
merge cost.response_2022 (in=inone) cost_1.cams_accsp_combined (in=intwo);
by hullid_1; if inone=1;
drop permit_1;
proc sort; by hullid_1;

proc means noprint;
by hullid_1;
var commercial_revenue;
id icf_master_id;
output out=cost_1.response_commercial_revenue sum=;

data impute_frequency; set cost_1.response_cams_accsp_revenue; proc sort; by impute; proc freq; tables impute;


/***Recreational Revenue***/
proc sql noexec;
	connect to oracle (user =&orausername1  password =&orapassword1 path = NEFSC_USERS);

/*Queries all party/charter trips for 2022*/
create table cost_2.rec_2022_vtr as select * from connection to oracle 
(select a.permit, a.tripid, a.state1, a.state2, a.nanglers, b.gearcode 
from vtr.veslog2022t a, vtr.veslog2022g b
where tripcatg in (2, 3)
and a.tripid=b.tripid);

disconnect from oracle;
quit;

data bbb; set cost_2.rec_2022_vtr;
permit_1=strip(put(permit,6.)); drop permit;
proc sort; by permit_1;

/*Merge to response dataset*/
data response_2022_a; set cost.response_2022; 
keep permit_1;
proc sort; by permit_1;

data cost_2.response_with_rec_trips;
merge response_2022_a (in=inone) bbb (in=intwo);
by permit_1; if inone=1; if intwo=1;

data cost_2.response_with_rec_trips_2; set cost_2.response_with_rec_trips;
proc sort nodupkey; by permit_1 tripid; /*Removes 7 duplicate records, in which multiple VTRs are recorded on the same trip. Since gearcode remains unchanged, delete duplicate trip records*/

data cost_2.response_with_rec_trips_3; set cost_2.response_with_rec_trips_2;
/*13 trips out of 782 with no state listed. All of these cases are by vessels that only landed in one state throughout the year. Assign landing state for the 13 cases based on the other vessel rec trips*/
/*CODE REMOVED FROM REPO DUE TO CONFIDENTIALITY*/
proc sort; by state1;

proc freq data=cost_2.response_with_rec_trips_3;
tables state1; /*1 obs for state outside the Northeast (Florida). Delete this observation (done in dataset cost_2.response_with_rec_trips_rev)*/

/*Bring in dataset of average angler cost per trip by state*/
data ccc; set cost_2.trip_avgs_northeast_charter_fees;
if State in ('Connecticut') then do; 
state1="CT"; end;
if State in ('Delaware') then do; 
state1="DE"; end;
if State in ('Maine') then do; 
state1="ME"; end;
if State in ('Maryland') then do; 
state1="MD"; end;
if State in ('Massachusetts') then do; 
state1="MA"; end;
if State in ('New Hampshire') then do; 
state1="NH"; end;
if State in ('New Jersey') then do; 
state1="NJ"; end;
if State in ('New York') then do; 
state1="NY"; end;
if State in ('North Carolina') then do; 
state1="NC"; end;
if State in ('Rhode Island') then do; 
state1="RI"; end;
if State in ('Virginia') then do; 
state1="VA"; end;
avg_angler_fee=mean;
keep state state1 avg_angler_fee;
proc sort; by state1;

/*Merge party/charter trips by responding vessels with average angler cost per trip*/
data cost_2.response_with_rec_trips_rev;
merge cost_2.response_with_rec_trips_3 (in=inone) ccc (in=intwo);
by state1; if inone=1;
if state1 in ('FL') then delete; /*1 obs for state outside the Northeast (Florida). Delete this observation*/
recreational_revenue=nanglers*avg_angler_fee;
proc sort; by permit_1;

/*Sum revenue by vessel*/
proc means noprint;
by permit_1;
var recreational_revenue;
output out=cost_2.response_recreational_revenue sum=;


/***Define Primary Commercial Gear in 2022***/
data gear_1; set cost_1.cams_accsp_combined;
if source in ('CAMS') then do;
negear_1 = input(negear, 12.); drop negear;
date_1=datepart(date_trip); /*Use trip date as second way of defining trips, after DOCID*/
year=year(date_1);
month=month(date_1);
day=day(date_1);end;

if source in ('ACCSP') then negear_1 = 30; /*Defining bluefin tuna as all handgear trips. The codes received from ACCSP are incorrect*/
proc sort; by negear_1;

/*Merge to key for defining gear type in 2022 cost survey*/
data gear_2;
merge gear_1 (in=inone) cost.gear_key; 
by negear_1; if inone=1;
if geargroupfor2022survey in ('Dredge_Hydraulic') then comm_gear_2022 = "Dredge_Hydraulic";
if geargroupfor2022survey in ('Dredge_Scallop') then comm_gear_2022 = "Scallop Dredge";
if geargroupfor2022survey in ('Gillnet') then comm_gear_2022 = "Gillnet";
if geargroupfor2022survey in ('Handgear') then comm_gear_2022 = "Handgear";
if geargroupfor2022survey in ('Longline') then comm_gear_2022 = "Longline";
if geargroupfor2022survey in ('Pot/Trap') then comm_gear_2022 = "Pot/Trap";
if geargroupfor2022survey in ('Seine') then comm_gear_2022 = "Seine";
if geargroupfor2022survey in ('Trawl_Bottom', 'Trawl_Midwater') then comm_gear_2022 = "Trawl";
if geargroupfor2022survey in ('Unknown') then comm_gear_2022 = "Unknown";
proc sort; by hullid_1 docid year month day;

/*Sum revenue by trip, retaining gear*/
proc means noprint data=gear_2;
by hullid_1 docid year month day;
var commercial_revenue;
id comm_gear_2022;
output out=trip_revenue_gear sum=;
data cost_3.trip_revenue_gear; set trip_revenue_gear; 
proc sort; by hullid_1 comm_gear_2022;

/*Sum revenue by vessel, gear*/
proc means noprint;
by hullid_1 comm_gear_2022;
var commercial_revenue;
output out = gear_3 sum=gear_revenue;

data cost_3.gear_4; set gear_3; 
if gear_revenue=. then delete; if gear_revenue=0 then delete; /*these would be inactive vessels and should not have a primary gear assigned*/
proc sort; by hullid_1;

/*Merge to response dataset*/
data cost_3.response_survey_gear; 
merge cost.response_2022 (in=inone) cost_3.gear_4;
by hullid_1; if inone=1;
drop permit_1;
proc sort; by hullid_1 gear_revenue;

/*For each responding vessel, retain the top earning gear type, as well as the amount of commercial revenue associated with that gear type*/
data cost_3.response_top_survey_gear;
set cost_3.response_survey_gear; 
by hullid_1;
if last.hullid_1;
primary_comm_gear_2022 = comm_gear_2022; drop comm_gear_2022;
primary_gear_revenue = gear_revenue; drop gear_revenue;
proc sort; by hullid_1;

/*Merge to sampling frame dataset*/
data cost_3.sampling_frame_survey_gear; 
merge cost.sampling_frame_2022 (in=inone) cost_3.gear_4;
by hullid_1; if inone=1;
drop permit_1;
proc sort; by hullid_1 gear_revenue;

/*For each sampled vessel, retain the top earning gear type, as well as the amount of commercial revenue associated with that gear type*/
data cost_3.sampling_frame_top_survey_gear;
set cost_3.sampling_frame_survey_gear; 
by hullid_1;
if last.hullid_1;
primary_comm_gear_2022 = comm_gear_2022; drop comm_gear_2022;
primary_gear_revenue = gear_revenue; drop gear_revenue;
proc sort; by hullid_1;

/*Merge to all vessels dataset*/
data cost_3.all_vessels_survey_gear; 
merge cost_1.all_vessels_commercial_revenue (in=inone) cost_3.gear_4;
by hullid_1; if inone=1;
proc sort; by hullid_1 gear_revenue;

/*For all vessels, retain the top earning gear type*/
data cost_3.all_vessels_top_survey_gear;
set cost_3.all_vessels_survey_gear; 
by hullid_1;
if last.hullid_1;
primary_comm_gear_2022 = comm_gear_2022; drop comm_gear_2022;
primary_gear_revenue = gear_revenue; drop gear_revenue;
proc sort; by hullid_1;


/***Define Primary Commercial FMP in 2022***/
data fmp_1; set cost_1.cams_accsp_combined;
if ITIS_TSN in ('074096') then species_group = "Channeled Whelk                                                                  "; 
if ITIS_TSN in ('097314') then species_group = "Lobster"; 
if ITIS_TSN in ('167680') then species_group = "Striped Bass"; 

if FMP in ('Northeast Multispecies') then species_group = "Groundfish";
if FMP in ('Sea Scallop') then species_group = "Scallop"; 
if FMP in ('Monkfish') then species_group = "Monkfish";
if FMP in ('Atlantic Herring') then species_group = "Herring";
if FMP in ('Skates') then species_group = "Skate";
if FMP in ('Small-Mesh Multispecies') then species_group = "Whiting";
if FMP in ('Atlantic Deep-Sea Red Crab') then species_group = "Red Crab";

if FMP in ('Summer Flounder, Scup, Black Sea Bass') then species_group = "Summer Flounder, Scup, Black Sea Bass";
if FMP in ('Mackerel, Squid, and Butterfish') then species_group = "Squid, Mackerel, Butterfish";
if FMP in ('Surfclam, Ocean Quahog') then species_group = "Surf Clam, Ocean Quahog";
if FMP in ('Bluefish') then species_group = "Bluefish";
if FMP in ('Tilefish') then species_group = "Tilefish";
if FMP in ('Spiny Dogfish') then species_group = "Dogfish";

if FMP in ('Highly Migratory Species') then species_group = "Highly Migratory Species";  

if species_group = "" then species_group = "Other";
proc sort; by hullid_1 species_group;

/*Sum revenue by vessel, FMP*/
proc means noprint;
by hullid_1 species_group;
var commercial_revenue;
output out = fmp_2 sum=fmp_revenue;

data cost_4.fmp_3; set fmp_2; 
if fmp_revenue=. then delete; if fmp_revenue=0 then delete; /*these would be inactive vessels and should not have a primary FMP assigned*/
proc sort; by hullid_1;

/*Merge to response dataset*/
data cost_4.response_fmp; 
merge cost.response_2022 (in=inone) cost_4.fmp_3;
by hullid_1; if inone=1;
drop permit_1;
proc sort; by hullid_1 fmp_revenue;

/*For each responding vessel, retain the top earning FMP, as well as the amount of commercial revenue associated with that FMP*/
data cost_4.response_top_fmp;
set cost_4.response_fmp; 
by hullid_1;
if last.hullid_1;
primary_comm_fmp_2022 = species_group; drop species_group;
primary_fmp_revenue = fmp_revenue; drop fmp_revenue;
proc sort; by hullid_1;

/*Merge to sampling frame dataset*/
data cost_4.sampling_frame_fmp; 
merge cost.sampling_frame_2022 (in=inone) cost_4.fmp_3;
by hullid_1; if inone=1;
drop permit_1;
proc sort; by hullid_1 fmp_revenue;

/*For each sampled vessel, retain the top earning FMP, as well as the amount of commercial revenue associated with that FMP*/
data cost_4.sampling_frame_top_fmp;
set cost_4.sampling_frame_fmp; 
by hullid_1;
if last.hullid_1;
primary_comm_fmp_2022 = species_group; drop species_group;
primary_fmp_revenue = fmp_revenue; drop fmp_revenue;
proc sort; by hullid_1;

/*Evaluate mean and median FMP revenues by sampling frame*/
data sf_top_fmp_vessels; set cost_4.sampling_frame_top_fmp; 
keep hullid_1 primary_comm_fmp_2022;
proc sort; by hullid_1;

data raw_revenue; set cost_1.cams_accsp_combined;
keep hullid_1 commercial_revenue;
proc sort; by hullid_1;

data raw_revenue_sf;
merge sf_top_fmp_vessels (in=inone) raw_revenue (in=intwo);
by hullid_1;
if inone=1; if intwo=1;
proc means noprint;
by hullid_1 primary_comm_fmp_2022;
var commercial_revenue;
output out = sf_vessel_revenues sum=;

data cost_4.sf_vessel_revenues_2; set sf_vessel_revenues;
drop _TYPE_ _FREQ_;
proc sort; by primary_comm_fmp_2022;
proc means noprint;
by primary_comm_fmp_2022;
var commercial_revenue;
output out = cost_4.sf_mean_revenues mean=;

proc means noprint data=cost_4.sf_vessel_revenues_2;
by primary_comm_fmp_2022;
var commercial_revenue;
output out = cost_4.sf_median_revenues median=;

/*Merge to all vessels dataset*/
data cost_4.all_vessels_fmp; 
merge cost_1.all_vessels_commercial_revenue (in=inone) cost_4.fmp_3;
by hullid_1; if inone=1;
proc sort; by hullid_1 fmp_revenue;

/*For all vessels, retain the top earning FMP*/
data cost_4.all_vessels_top_fmp;
set cost_4.all_vessels_fmp; 
by hullid_1;
if last.hullid_1;
primary_comm_fmp_2022 = species_group; drop species_group;
primary_fmp_revenue = fmp_revenue; drop fmp_revenue;
proc sort; by hullid_1;

/*For vessels in the "Other" FMP category, define the top revenue-generating species*/
data other_fmp_vessels; set cost_4.response_top_fmp;
if primary_comm_fmp_2022 in ('Other');
keep icf_master_id hullid_1 primary_comm_fmp_2022;
proc sort; by hullid_1;

data cams_all_2022_impute_2; set cost_1.cams_all_2022_impute;
proc sort; by hullid_1;

data other_fmp_vessels_cams;
merge other_fmp_vessels (in=inone) cams_all_2022_impute_2 (in=intwo);
by hullid_1; 
if inone=1; if intwo=1;
proc sort; by hullid_1 itis_name;

proc means noprint;
by hullid_1 itis_name;
vars commercial_revenue;
id icf_master_id;
output out = other_fmp_vessels_cams_2 sum=;

data cost_4.other_fmp_vessels_species; 
set other_fmp_vessels_cams_2;
drop _TYPE_ _FREQ_;
proc sort; by hullid_1 commercial_revenue;

data cost_4.other_vessels_top_species;
set cost_4.other_fmp_vessels_species;
by hullid_1;
if last.hullid_1;
primary_species_revenue = commercial_revenue; drop commercial_revenue;
proc sort; by hullid_1;


/***Merge Response Datasets***/
data cost.semi_final_1;
merge cost_1.response_commercial_revenue cost_3.response_top_survey_gear cost_4.response_top_fmp;
by hullid_1;
proc sort; by hullid_1;

data semi_final_2; /*Merge back to response dataset to get permit number for linking to for-hire revenue*/
merge cost.semi_final_1 (in=inone) cost.response_2022 (in=intwo);
by hullid_1;
proc sort; by permit_1;

data cost.semi_final_2;
merge semi_final_2 cost_2.response_recreational_revenue; 
by permit_1;
if commercial_revenue=. then commercial_revenue=0; /*Set blanks as zero in order to calculate total revenue*/
if recreational_revenue=. then recreational_revenue=0; /*Set blanks as zero in order to calculate total revenue*/
if recreational_revenue>0 then recreational_revenue=round(recreational_revenue); /*Set blanks as zero in order to calculate total revenue*/
total_revenue = commercial_revenue + recreational_revenue;

if primary_comm_gear_2022 in ('') then do; /*These are cases when no primary gear is merged since they was no commercial activity*/
if recreational_revenue>0 then primary_comm_gear_2022 = "Recreational";
if recreational_revenue=0 then primary_comm_gear_2022 = "No Revenue"; 
primary_gear_revenue=0; end;

if primary_comm_fmp_2022 in ('') then do; /*These are cases when no FMP is merged since they was no commercial activity*/
if recreational_revenue>0 then primary_comm_fmp_2022 = "Recreational";
if recreational_revenue=0 then primary_comm_fmp_2022 = "No Revenue"; 
primary_fmp_revenue=0; end;

hullid=hullid_1; 
permit=permit_1; 

data cost.final_revenue; 
retain icf_master_id  permit  hullid  primary_comm_gear_2022  primary_gear_revenue  primary_comm_fmp_2022  primary_fmp_revenue  commercial_revenue  recreational_revenue  total_revenue;
set cost.semi_final_2;
keep   icf_master_id  permit  hullid  primary_comm_gear_2022  primary_gear_revenue  primary_comm_fmp_2022  primary_fmp_revenue  commercial_revenue  recreational_revenue  total_revenue;
proc sort; by icf_master_id;


/***Merge Sampling Frame Datasets***/
data sf_1; set cost_3.sampling_frame_top_survey_gear;
keep hull_id primary_comm_gear_2022;
proc sort; by hull_id;

data sf_2; set cost_4.sampling_frame_top_fmp;
keep hull_id primary_comm_fmp_2022;
proc sort; by hull_id;

data sf_3; set cost_1.all_vessels_commercial_revenue;
hull_id  = hullid_1;
keep hull_id commercial_revenue;
proc sort; by hull_id;

data cost.final_sampling_frame_groups;
merge sf_1 (in=inone) sf_2 (in=intwo) sf_3;
by hull_id; if inone=1; if intwo=1;
/*Build fleets combining primary gear and FMP*/
if primary_comm_gear_2022 in ('Scallop Dredge') then do;
 if primary_comm_fmp_2022 in ('Scallop') then primary_gear_fmp_2022 = "Scallop Dredge-Scallop             ";
 else primary_gear_fmp_2022 = "Scallop Dredge-Other";end;

if primary_comm_gear_2022 in ('Dredge_Hydraulic') then do;
 if primary_comm_fmp_2022 in ('Surf Clam, Ocean Quahog') then primary_gear_fmp_2022 = "Dredge_Hydraulic-SCOQ         ";
 else primary_gear_fmp_2022 = "Dredge_Hydraulic-Other";end;

if primary_comm_gear_2022 in ('Gillnet') then do;
 if primary_comm_fmp_2022 in ('Monkfish') then primary_gear_fmp_2022 = "Gillnet-Monkfish             ";
 else primary_gear_fmp_2022 = "Gillnet-Other";end;

if primary_comm_gear_2022 in ('Handgear') then do;
 if primary_comm_fmp_2022 in ('Summer Flounder, Scup, Black Sea Bass') then primary_gear_fmp_2022 = "Handgear-Summer Flounder, Scup, BSB             ";
 if primary_comm_fmp_2022 in ('Highly Migratory Species') then primary_gear_fmp_2022 = "Handgear-Highly Migratory Species";
 if primary_comm_fmp_2022 in ('Striped Bass') then primary_gear_fmp_2022 = "Handgear-Striped Bass";
 if primary_comm_fmp_2022 not in ('Summer Flounder, Scup, Black Sea Bass', 'Highly Migratory Species', 'Striped Bass') then primary_gear_fmp_2022 = "Handgear-Other";end;

if primary_comm_gear_2022 in ('Longline') then do;
 if primary_comm_fmp_2022 in ('Dogfish') then primary_gear_fmp_2022 = "Longline-Dogfish             ";
 if primary_comm_fmp_2022 in ('Highly Migratory Species') then primary_gear_fmp_2022 = "Longline-Highly Migratory Species";
 if primary_comm_fmp_2022 not in ('Dogfish', 'Highly Migratory Species') then primary_gear_fmp_2022 = "Longline-Other";end;

if primary_comm_gear_2022 in ('Pot/Trap') then do;
 if primary_comm_fmp_2022 in ('Summer Flounder, Scup, Black Sea Bass') then primary_gear_fmp_2022 = "Pot/Trap-Summer Flounder, Scup, BSB             ";
 if primary_comm_fmp_2022 in ('Lobster') then primary_gear_fmp_2022 = "Pot/Trap-Lobster";
 if primary_comm_fmp_2022 in ('Channeled Whelk') then primary_gear_fmp_2022 = "Pot/Trap-Whelk";
 if primary_comm_fmp_2022 not in ('Summer Flounder, Scup, Black Sea Bass', 'Lobster', 'Channeled Whelk') then primary_gear_fmp_2022 = "Pot/Trap-Other";end;

if primary_comm_gear_2022 in ('Seine') then do;
 if primary_comm_fmp_2022 in ('Herring') then primary_gear_fmp_2022 = "Seine-Herring             ";
 else primary_gear_fmp_2022 = "Seine-Other";end;

if primary_comm_gear_2022 in ('Trawl') then do;
 if primary_comm_fmp_2022 in ('Summer Flounder, Scup, Black Sea Bass') then primary_gear_fmp_2022 = "Trawl-Summer Flounder, Scup, BSB             ";
 if primary_comm_fmp_2022 in ('Groundfish') then primary_gear_fmp_2022 = "Trawl-Groundfish";
 if primary_comm_fmp_2022 in ('Squid, Mackerel, Butterfish') then primary_gear_fmp_2022 = "Trawl-Squid, Mackerel, Butterfish";
 if primary_comm_fmp_2022 not in ('Summer Flounder, Scup, Black Sea Bass', 'Groundfish', 'Squid, Mackerel, Butterfish') then primary_gear_fmp_2022 = "Trawl-Other";end;

 if primary_comm_gear_2022 in ('Recreational') then primary_gear_fmp_2022 = "Recreational";
 if primary_comm_gear_2022 in ('No Revenue') then primary_gear_fmp_2022 = "No Revenue";


